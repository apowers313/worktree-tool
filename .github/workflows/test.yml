name: CI/CD Pipeline

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

jobs:
  # Main build and test job that runs for all pushes and PRs
  build-test:
    name: Build and Test (${{ matrix.os }}, Node ${{ matrix.node }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node: [18, 20, 22]
        include:
          - os: ubuntu-latest
            tmux: true
          - os: macos-latest
            tmux: true
          - os: windows-latest
            tmux: false
      fail-fast: false
    
    outputs:
      should-release: ${{ steps.check-release.outputs.should-release }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      
      - name: Install tmux (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y tmux
      
      - name: Install tmux (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install tmux

      - name: Install dependencies
        run: npm ci
        env:
          HUSKY: 0

      - name: Run build
        run: npm run build

      - name: Run lint
        run: npm run lint

      - name: Run typecheck
        run: npm run typecheck

      - name: Run unit tests
        run: npm test

      - name: Run integration tests
        run: npm run test:integration
        env:
          CI: true
          DISABLE_TMUX: ${{ matrix.tmux == false }}

      - name: Run e2e tests
        run: npm run test:e2e
        env:
          CI: true
          DISABLE_TMUX: ${{ matrix.tmux == false }}

      - name: Generate coverage
        if: matrix.os == 'ubuntu-latest' && matrix.node == '20'
        run: npm run test:coverage

      - name: Upload coverage artifacts
        if: matrix.os == 'ubuntu-latest' && matrix.node == '20'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 1

      - name: Upload build artifacts
        if: matrix.os == 'ubuntu-latest' && matrix.node == '20'
        uses: actions/upload-artifact@v4
        with:
          name: build-dist
          path: dist/
          retention-days: 1

      - name: Check if release needed
        id: check-release
        if: matrix.os == 'ubuntu-latest' && matrix.node == '20'
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/master" || "${{ github.ref }}" == "refs/heads/main" ]] && [[ "${{ github.event_name }}" == "push" ]]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
          fi

  # Publish coverage reports
  coverage:
    name: Publish Coverage
    needs: build-test
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: coverage/

      - name: Upload to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./coverage/lcov.info
